/**
	* @file main.cpp
	* main: This main file reproduces the experiments reported in "Sapo: Reachability Computation and Parameter Synthesis of Polynomial Dynamical Systems"
	* @author Tommaso Dreossi <tommasodreossi@berkeley.edu>
	* @version 0.1
	*/

#include <stdio.h>
#include <iostream>

#include "Common.h"
#include "Bundle.h"
#include "Sapo.h"
#include "driver.h"
#include "AutoGenerated.h"

using namespace std;

int main(int argc,char** argv){
	
	driver drv;
	string file;
	
	if (argc == 1)
	{
		file = "-";				// causes lexer to use stdin
	}
	else if (argc == 2)
	{
		file = argv[1];		// provided file used
	}
	else
	{
		cerr << "usage: " << argv[0] << " <filename>" << endl;
		cerr << "       " << argv[0] << endl;
		return 1;
	}
	
	if (drv.parse(file) != 0)
		return 2;
	
	// Sapo's options
	sapo_opt options;
	options.trans = drv.m->getTransValue();
	options.decomp = drv.m->getDecomposition() ? 1 : 0;
	options.alpha = drv.m->getAlpha();
	options.verbose = false;

	Model* model = new AutoGenerated(*(drv.m));
	Sapo* sapo = new Sapo(model, options);

	if (drv.m->getProblem() == AbsSyn::problemType::REACH)
	{
		Flowpipe *flowpipe;
		if(model->getParams().nops() == 0)
		{
			flowpipe = sapo->reach(model->getReachSet(), drv.m->getIterations());	// reachability analysis
		}
		else
		{
			flowpipe = sapo->reach(model->getReachSet(), model->getParaSet()->at(0), drv.m->getIterations());	// reachability analysis
		}
		cout << "RESULTS" << endl;
		flowpipe->print();
		cout << "END RESULTS" << endl;
	}
	else
	{
		// Synthesize parameters
		LinearSystemSet *synth_parameter_set = sapo->synthesize(model->getReachSet(), model->getParaSet(), model->getSpec());
		if (synth_parameter_set->size() == 0)
		{
			cout << "RESULTS" << endl;
			cout << "END RESULTS" << endl;
			synth_parameter_set->print();
		}
		else
		{
			Flowpipe *F = sapo->reach(model->getReachSet(), synth_parameter_set->at(0), drv.m->getIterations());
			cout << "RESULTS" << endl;
			F->print();
			cout << "END RESULTS" << endl;
			synth_parameter_set->print();
		}
	}

	exit(EXIT_SUCCESS);
}
